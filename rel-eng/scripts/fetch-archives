#!/usr/bin/env python3

import argparse
import os
import subprocess
import tempfile
import time
import yaml

import utils


DESCRIPTION = "Fetch archives for Pulp and all its dependencies"
GIT_COMMAND = ('scripts/git-archive.sh {working_dir} {dest} {project} {prefix} '
               'https://github.com/pulp/{project}.git {treeish}')
SPECTOOL_CMD = "spectool -C {destination} -g {spec}"


def set_release(package, commit):
    """
    Set the nightly-style Release field, if necessary.

    The format loosely follows the Fedora Packaging guidelines. It starts with
    a release number less than one for sorting purposes, followed by the 'n' string
    to identify it as a nightly build. Next, a timestamp in the format YYYYMMDDHHMM
    identifies the build time. Finally, the SCM type and commit hash is appended to
    identify the exact commit being built.
    """
    if package['release'] == 'nightly':
        package['release'] = '0.1n' + BUILD_TIMESTAMP + 'git' + commit[0:7] + '%{?dist}'


def pulp_tarballs(config):
    """
    Build tarballs for all the Pulp projects.

    Although we could use the archive feature of GitHub, it uses the prefix
    `<project-name>-<treeish>` which is painful to deal with in the specfile.
    This simply checks out the repository and calls `git archive` with the
    project name as the prefix. It also updates the configuration with the
    actual commit hash used when building from a treeish object.
    """
    # The approximate build time, used in the nightly Release field
    buildtime = time.strftime('%Y%m%d%H%M')

    with tempfile.TemporaryDirectory() as tmp_dir:
       for package in config['pulp-packages']:
           name = package['name'].replace('_', '-')
           destination = os.path.join(os.getcwd(), 'packaging/rpms/', name, 'sources',
                                      name + '-' + package['version'] + '.tar.gz')
           command = GIT_COMMAND.format(working_dir=tmp_dir, project=package['name'],
                                        prefix=name + '-' + package['version'],
                                        dest=destination, treeish=package['treeish'])
           print('Running "' + command + '"')
           result = subprocess.check_output(command, shell=True)

           # Set the release field if it's a nightly build; this is written to the config
           if package['release'] == 'nightly':
               for line in result.decode('utf8').split('\n'):
                   if 'HEAD SHA1' in line:
                       commit = line.split(':')[1].strip()
                       break
               # This format loosely follows the Fedora guidelines, but uses hours and
               # minutes in the timestamp.
               package['commit'] = commit
               package['snap_release'] = '0.1n' + buildtime + 'git' + commit[0:7] + '%{?dist}'


def deps_tarballs(config):
    """Fetch the source tarballs for all our dependencies"""
    for platform in config['platforms']:
        # Not all deps exist on every branch, so loop through them all
        utils.checkout(platform)

        for package in config['external-deps']:
            name = package['name']
            base_dir = os.path.join(os.getcwd(), 'packaging/rpms/{name}/'.format(name=name))
            source_dir = os.path.join(base_dir, 'sources/')
            specfile = os.path.join(base_dir, name + '.spec')

            if not os.path.exists(specfile):
                print(('Skipping {name} on {platform} since the specfile is missing from'
                       '{path}').format(name=name, platform=platform, path=specfile))
                continue


            os.makedirs(source_dir, exist_ok=True)
            command = SPECTOOL_CMD.format(destination=source_dir, spec=specfile)
            print('Running "' + command + '"')
            result = subprocess.check_call(command, shell=True)

parser = argparse.ArgumentParser(description=DESCRIPTION)
parser.add_argument('config', help='YAML file describing the versions of each project')

args = parser.parse_args()
config = utils.load_config(args.config)
pulp_tarballs(config)
deps_tarballs(config)
utils.write_config(args.config, config)
